// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // sol2)
    // following Wonil's solution
    // 0     (000000000000000) - 16383 (011111111111111) = RAM16K
    // 16384 (100000000000000) - 24575 (101111111111111) = SCREEN
    // 24576 (110000000000000)                           = KEYBOARD

    // => most significant 2 bits
    // RAM16K = 00 or 01
    // SCREEN = 10
    // KEYBOARD = 11

    // dmux's output a,b,c,d means "load==1 && address"
    DMux4Way(in=load, sel=address[13..14], a=dmuxRAM16K1, b=dmuxRAM16K2, c=dmuxScreen, d=dmuxKeyboard);
    Or(a=dmuxRAM16K1, b=dmuxRAM16K2, out=dmuxRAM16K);

    RAM16K(in=in, load=dmuxRAM16K, address=address[0..13], out=outRAM16K);
    Screen(in=in, load=dmuxScreen, address=address[0..12], out=outScreen);
    Keyboard(out=outKeyboard);

    Mux4Way16(a=outRAM16K, b=outRAM16K, c=outScreen, d=outKeyboard, sel=address[13..14], out=out);



    // // sol1)
    // // if address < 0x4000 (=0100000000000000), then access memory
    // // if address - 0x4000 < 0, ...
    // And16(a[15]=false, a[14]=true, a[0..13]=false, b=true, out=screenBase);
    // And16(a[0..14]=address, b=true, out=addressSixteenBits);
    // ALU(x=addressSixteenBits, y=screenBase, nx=true, f=true, no=true, out=addressMinusScreenBase, zr=xMinusYEqualsZero, ng=addressSmallerThanScreenBase);
    // And(a=addressSmallerThanScreenBase, b=true, out=isData);
    // And(a=load, b=isData, out=loadForData);
    // RAM16K(in=in, load=loadForData, address=address[0..13], out=dataOut);


	// // if address == 0x6000 (=24576), then access keyboard
    // And16(a[15]=false, a[14]=true, a[13]=true, a[0..12]=false, b=true, out=keyboardBase);
    // ALU(x[0..14]=address, y=keyboardBase, nx=true, f=true, no=true, out=thirdAluOut, zr=isAddressKeyboard, ng=thirdAluNg);
    // Keyboard(out=keyboardOut);

    // // I was doing ALU wrong. x - y should be `nx=true, f=true, no=true`, not `ny=true, f=true`.
    // // I should've read the API doc more carefully!!


    // // if address is in the range 0x4000-0x5FFF, then access screen memory map
    // // when accessing the memory map, use address = address - 0x4000
    // Not(in=isData, out=isAddressNotData);
    // Not(in=isAddressKeyboard, out=isAddressNotKeyboard);

    // And(a=isAddressNotData, b=isAddressNotKeyboard, out=isScreen);
    // And(a=load, b=isScreen, out=loadForScreen);
    // And16(a=addressMinusScreenBase, b=true, out[0..12]=addressMinusScreenBaseThirteenBits);
    // Screen(in=in, load=loadForScreen, address=addressMinusScreenBaseThirteenBits, out=screenOut);

    // // choose what to return
    // Mux16(a=false, b=dataOut, sel=isData, out=out1);
    // Mux16(a=false, b=keyboardOut, sel=isAddressKeyboard, out=out2);
    // Mux16(a=false, b=screenOut, sel=isScreen, out=out3);

    // Or16(a=out1, b=out2, out=or1);
    // Or16(a=or1, b=out3, out=out);
}
