// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // ARegister, DRegister and PC should be used 
    PARTS:

    // TODO: aluOut from ALU
    Mux16(a[0..14]=instruction[0..14], b=aluOut, sel=instruction[15], out=aRegInput);

    // TODO: calculate aRegLoad
    // if instruction[15] == 0 => aRegLoad = 1
    // if instruction[15] == 1 && instruction[5] == 1 => aRegLoad=1

    And(a=instruction[15], b=true, out=cIns);
    Not(in=cIns, out=aIns);
    And(a=cIns, b=instruction[5], out=isDestA);
    And(a=cIns, b=instruction[4], out=isDestD);
    And(a=cIns, b=instruction[3], out=writeM);

    Or(a=aIns, b=isDestA, out=aRegLoad);
    
    ARegister(in=aRegInput, load=aRegLoad, out=aRegOut);

    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aOrMOut);

    // TODO: aluOut from ALU
    DRegister(in=aluOut, load=isDestD, out=dRegOut);

    // TODO: implement PC

    ALU(x=dRegOut, y=aOrMOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, zr=zr, ng=ng);

    // jjj
    DMux8Way(sel[2]=instruction[2], sel[1]=instruction[1], sel[0]=instruction[0], in=true,
        a=dMuxA, // no jump
        b=dMuxB, // if comp > 0 jump
        c=dMuxC, // if comp == 0 jump
        d=dMuxD, // if comp >= 0 jump
        e=dMuxE, // if comp < 0 jump
        f=dMuxF, // if comp != 0 jump
        g=dMuxG, // if comp <= 0 jump
        h=dMuxH // unconditional jump
    );

    // comp > 0  <=> ng == 0 AND zr == 0
    // comp == 0 <=> zr == 1
    // comp >= 0 <=> ng == 0 OR zr == 1
    // comp < 0  <=> ng == 1
    // comp != 0 <=> zr == 0
    // comp <= 0 <=> ng == 1 OR zr == 1
    And(a=dMuxA, b=false, out=jumpA);

    Not(in=ng, out=notNg);
    And(a=notNg, b=notZr, out=compGreaterThanZero);
    And(a=dMuxB, b=compGreaterThanZero, out=jumpB);

    And(a=dMuxC, b=zr, out=jumpC);

    Or(a=notNg, b=zr, out=GTE);
    And(a=dMuxD, b=GTE, out= jumpD);

    And(a=dMuxE, b=ng, out=jumpE);

    Not(in=zr, out=notZr);
    And(a=dMuxF, b=notZr, out=jumpF);

    Or(a=ng, b=zr, out=LTE);
    And(a=dMuxG, b=LTE, out=jumpG);

    And(b=dMuxH, a=true, out=jumpH);

    Or8Way(
        in[0]=jumpA,
        in[1]=jumpB,
        in[2]=jumpC,
        in[3]=jumpD,
        in[4]=jumpE,
        in[5]=jumpF,
        in[6]=jumpG,
        in[7]=jumpH,
        out=jumpFromC
    );

    And(a=jumpFromC, b=cIns, out=jump);

    Not(in=jump, out=notJump);

    PC(in=aRegOut, load=jump, inc=notJump, reset=reset, out=pcOut);
    And16(a=pcOut, b=true, out[0..14]=pc);

    And16(a=true, b=aRegOut, out[0..14]=addressM);

    And16(a=aluOut, b=true, out=outM);
}
