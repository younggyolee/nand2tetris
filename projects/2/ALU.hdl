// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=xZero);

    // if (nx == 1) sets x = !x       // bitwise not
    Not16(in=xZero, out=notx);
    Mux16(a=xZero, b=notx, sel=nx, out=xOne);

    // if (zy == 1) sets y = 0        // 16-bit constant
    Mux16(a=y, b=false, sel=zy, out=yZero);

    // if (ny == 1) sets y = !y       // bitwise not
    Not16(in=yZero, out=noty);
    Mux16(a=yZero, b=noty, sel=ny, out=yOne);

    // if (f == 1)  sets out = x + y  // integer 2's complement addition
    And16(a=xOne, b=yOne, out=xAndY);
    Add16(a=xOne, b=yOne, out=xPlusY);
    Mux16(a=xAndY, b=xPlusY, sel=f, out=fOut);


    // * if (out == 0) zr = 1, else zr = 0
    And16(a=fOut, b=true, out[0..7]=fAndTrueZero, out[8..15]=fAndTrueOne);
    Or8Way(in=fAndTrueZero, out=orZero);
    Or8Way(in=fAndTrueOne, out=orOne);
    Or(a=orZero, b=orOne, out=orTwo);
    Not(in=orTwo, out=isAllZeroes);

    // * if (out < 0)  ng = 1, else ng = 0
    And16(a=fOut, b=true, out[15]=ngZero);

    // if (f == 0)  sets out = x & y  // bitwise and
    // if (no == 1) sets out = !out   // bitwise not
    Not16(in=fOut, out=notFOut);
    Mux16(a=fOut, b=notFOut, sel=no, out=out, out[0..7]=outLow, out[8..15]=outHigh);

    // if (no == 1) sets out ng = !ng // bitwise not
    Not(in=ngZero, out=notNg);
    Mux(a=ngZero, b=notNg, sel=no, out=ng);

    // (2024-10-01) more optimised way following Wonil's solution
    Or8Way(in=outLow, out=outLowHasBit);
    Or8Way(in=outHigh, out=outHighHasBit);
    Or(a=outLowHasBit, b=outHighHasBit, out=outHasTrueBit);
    Not(in=outHasTrueBit, out=zr);

    // if (no == 1) => out becomes !out =>check if out == 0 or not

    // no    out      out_res    zr
    // 0     000..0              1
    // 0     not 0               0
    // 0     111..1   111..1     0
    // 1     000..0   111..1     0
    // 1     not 0    101..1     0
    // 1     111..1   000..0     1

    // // when adding 1, is it all ones? (=is it all ones in the original?)
    // Inc16(in=fOut, out=fOutPlus1);
    // Or16(a=fOutPlus1, b=false, out[0..7]=fOrFalseZero, out[8..15]=fOrFalseOne);
    // Or8Way(in=fOrFalseZero, out=orFalseZero);
    // Or8Way(in=fOrFalseOne, out=orFalseOne);
    // Or(a=orFalseZero, b=orFalseOne, out=orFalseTwo);
    // Not(in=orFalseTwo, out=isAllOnes);

    // // (no == 0 && is_all_zeroes == true) || (no == 1 && is_all_ones == true)
    // Not(in=no, out=notNo);
    // And(a=notNo, b=isAllZeroes, out=zrZero);
    // And(a=no, b=isAllOnes, out=zrOne);
    // Or(a=zrZero, b=zrOne, out=zr);
}
