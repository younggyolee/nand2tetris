// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/PC.hdl
/**
 * A 16-bit counter.
 * if      reset(t): out(t+1) = 0
 * else if load(t):  out(t+1) = in(t)
 * else if inc(t):   out(t+1) = out(t) + 1
 * else              out(t+1) = out(t)
 */
CHIP PC {
    IN in[16], reset, load, inc;
    OUT out[16];

    PARTS:
    // sol1)
    // go in the opposite direction of if-else conditions
    Or(a=reset, b=load, out=resetOrLoad);
    Or(a=resetOrLoad, b=inc, out=resetOrLoadOrInc);

    // out(t+1) = out(t) => outFromRegister
    // out(t+1) = out(t) + 1
    Inc16(in=outFromRegister, out=add1);
    Mux16(a=outFromRegister, b=add1, sel=resetOrLoadOrInc, out=afterInc);

    // out(t+1) = in(t)
    Mux16(a=afterInc, b=in, sel=resetOrLoad, out=afterLoad);

    // out(t+1) = 0
    Mux16(a=afterLoad, b=false, sel=reset, out=afterReset);

    Register(in=afterReset, load=load, out=outFromRegister);
    Or16(a=false, b=outFromRegister, out=out);

    // sol2)
    // use the truth table (8way)
    //     inc   load   reset
    //       0      0      0  => prevOut
    //       0      0      1  => 0
    //       0      1      0  => prevIn
    //       0      1      1  => 0
    //       1      0      0  => prevOut + 1
    //       1      0      1  => 0
    //       1      1      0  => prevIn
    //       1      1      1  => 0

    // Register(in=in, load=true, out=prevIn);
    // Register(in=curOut, load=true, out=prevOut);

    // DFF(in=reset, out=prevReset);
    // DFF(in=load, out=prevLoad);
    // DFF(in=inc, out=prevInc);

    // Or16(
    //     a[0]=prevReset,
    //     a[1]=prevLoad,
    //     a[2]=prevInc,
    //     b=false,
    //     out[0..2]=sel
    // );

    // Inc16(in=prevOut, out=prevOutPlusOne);

    // Mux8Way16(
    //     a=prevOut, // 000
    //     b=false,   // 001
    //     c=prevIn, // 010
    //     d=false,  // 011
    //     e=prevOutPlusOne,  // 100
    //     f=false,  // 101
    //     g=prevIn,  // 110
    //     h=false, // 111
    //     sel=sel,
    //     out=curOut
    // );

    // Or16(a=false, b=curOut, out=out);
}
